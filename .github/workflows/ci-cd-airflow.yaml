# .github/workflows/ci-cd-airflow.yml
name: CI/CD Airflow

permissions:
  contents: write

on:
  push:
    branches: [ CamiDz ]
    paths:
      - 'Servidor1/airflow/**'
      - 'Servidor1/docker-compose.yaml'
  workflow_dispatch:

env:
  REGISTRY: docker.io
  REPO_AIRFLOW: ${{ secrets.DOCKERHUB_USER }}/airflow

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Generar tag semántico
      - name: Definir IMAGE_TAG
        run: |
          echo "IMAGE_TAG=$(date +'%Y%m%d')-${{ github.run_number }}" >> $GITHUB_ENV

      # 3. Login en Docker Hub
      - name: Login en DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 4. Build y carga local para tests
      - name: Build de imagen Airflow (carga local)
        uses: docker/build-push-action@v4
        with:
          context: Servidor1/airflow
          load: true
          tags: ${{ env.REPO_AIRFLOW }}:${{ env.IMAGE_TAG }}

      # 5. Smoke-test de entrenamiento + SHAP
      - name: "Smoke-test: regresión y SHAP"
        run: |
          docker run --rm ${{ env.REPO_AIRFLOW }}:${{ env.IMAGE_TAG }} python - << 'EOF'
          import pandas as pd
          from sklearn.linear_model import LinearRegression
          import shap

          X = pd.DataFrame({'x1':[0,1,2,3],'x2':[1,2,3,4]})
          y = pd.Series([1,3,5,7])

          model = LinearRegression().fit(X, y)
          explainer = shap.Explainer(model, X)
          shap_values = explainer(X)

          assert shap_values.values.shape[0] == X.shape[0], "SHAP values count mismatch"
          print("✅ Entrenamiento y SHAP OK")
          EOF

      # 6. Push de la imagen validada
      - name: Push de imagen a DockerHub
        uses: docker/build-push-action@v4
        with:
          context: Servidor1/airflow
          push: true
          tags: ${{ env.REPO_AIRFLOW }}:${{ env.IMAGE_TAG }}

      # 7. Actualizar .env con el nuevo tag
      - name: Actualizar .env sin perder AIRFLOW_UID
        run: |
          # Asegura que exista .env
          touch .env

          # REPO_AIRFLOW (update or append)
          if grep -q '^REPO_AIRFLOW=' .env; then
            sed -i "s|^REPO_AIRFLOW=.*|REPO_AIRFLOW=${{ secrets.DOCKERHUB_USER }}/airflow|" .env
          else
            echo "REPO_AIRFLOW=${{ secrets.DOCKERHUB_USER }}/airflow" >> .env
          fi

          # IMAGE_TAG (update or append)
          if grep -q '^IMAGE_TAG=' .env; then
            sed -i "s|^IMAGE_TAG=.*|IMAGE_TAG=${{ env.IMAGE_TAG }}|" .env
          else
            echo "IMAGE_TAG=${{ env.IMAGE_TAG }}" >> .env
          fi

      # 8. Commit & Push de .env
      - name: Commit & Push .env
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add .env
          git commit -m "chore: actualizar .env con tag ${{ env.IMAGE_TAG }}" || echo "No hay cambios en .env"
          # Empujamos a la misma rama que disparó el workflow
          BRANCH="${GITHUB_REF#refs/heads/}"
          git push origin HEAD:$BRANCH

