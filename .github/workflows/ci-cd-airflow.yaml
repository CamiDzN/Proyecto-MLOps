# .github/workflows/ci-cd-airflow.yml
name: CI/CD Airflow

permissions:
  contents: write

on:
  push:
    branches: [ CamiDz ]
    paths:
      - 'Servidor1/airflow/**'
      - 'Servidor1/docker-compose.yaml'
  workflow_dispatch:

env:
  REGISTRY: docker.io
  REPO_AIRFLOW: ${{ secrets.DOCKERHUB_USER }}/airflow

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Definir IMAGE_TAG
        run: |
          echo "IMAGE_TAG=$(date +'%Y%m%d')-${{ github.run_number }}" >> $GITHUB_ENV

      - name: Login en DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 1) Build con load para poder testear localmente
      - name: Build de imagen Airflow (carga local)
        uses: docker/build-push-action@v4
        with:
          context: Servidor1/airflow
          load: true
          tags: ${{ env.REPO_AIRFLOW }}:${{ env.IMAGE_TAG }}

      # 2) Smoke-test: entrenamiento + SHAP
      - name: "Smoke-test: regresión y SHAP"
        run: |
          docker run --rm ${{ env.REPO_AIRFLOW }}:${{ env.IMAGE_TAG }} python - << 'EOF'
          import pandas as pd
          from sklearn.linear_model import LinearRegression
          import shap

          # Dataset sintético
          X = pd.DataFrame({'x1':[0,1,2,3], 'x2':[1,2,3,4]})
          y = pd.Series([1,3,5,7])

          # Entrena modelo
          model = LinearRegression().fit(X, y)

          # Explainer SHAP
          explainer = shap.Explainer(model, X)
          shap_values = explainer(X)

          # Validación sencilla
          assert shap_values.values.shape[0] == X.shape[0], "SHAP no devolvió tantas filas como entradas"
          print("✅ Entrenamiento y SHAP OK")
          EOF

      # 3) Push de la imagen validada
      - name: Push de imagen a DockerHub
        uses: docker/build-push-action@v4
        with:
          context: Servidor1/airflow
          push: true
          tags: ${{ env.REPO_AIRFLOW }}:${{ env.IMAGE_TAG }}

      # 4) Actualizar docker-compose.yaml con yq
      - name: Actualizar docker-compose.yaml con yq
        uses: mikefarah/yq@v4
        with:
          cmd: |
            eval '.["x-airflow-common"].image = strenv(REPO_AIRFLOW) + ":" + strenv(IMAGE_TAG)' -i Servidor1/docker-compose.yaml

      # 5) Commit & Push docker-compose.yaml
      - name: Commit & Push docker-compose.yaml
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          if git diff --quiet Servidor1/docker-compose.yaml; then
            echo "No hay cambios en docker-compose.yaml"
          else
            git add Servidor1/docker-compose.yaml
            git commit -m "chore: actualizar Airflow image tag a ${{ env.IMAGE_TAG }}"
            git push origin main
          fi
